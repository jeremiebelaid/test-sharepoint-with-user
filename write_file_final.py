#!/usr/bin/env python3
"""
Script final pour √©crire un fichier dans SharePoint DDASYS
Utilise l'API sites directement pour contourner les limitations
"""

import logging
import tempfile
from pathlib import Path
from typing import Optional
from datetime import datetime

import pandas as pd
import requests
from azure.identity import AzureCliCredential
from dotenv import load_dotenv
import os

# Chargement de la configuration
load_dotenv('config.env')

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    """Fonction principale de test d'√©criture SharePoint."""
    print("üìù Test d'√©criture SharePoint DDASYS - Version finale")
    print("=" * 55)
    
    # Configuration depuis les variables d'environnement
    site_url = os.getenv("SHAREPOINT_SITE_URL")
    folder_path = os.getenv("SHAREPOINT_FOLDER_PATH")
    
    if not site_url:
        print("‚ùå URL SharePoint non configur√©e dans config.env")
        return
    
    print(f"üåê Site SharePoint: {site_url}")
    print(f"üìÅ Dossier de test: {folder_path}")
    
    # V√©rification de l'authentification Azure CLI
    print("\n1. V√©rification de l'authentification Azure CLI...")
    try:
        credential = AzureCliCredential()
        token = credential.get_token("https://graph.microsoft.com/.default")
        print("‚úÖ Authentification Azure CLI OK")
    except Exception as e:
        print(f"‚ùå Erreur d'authentification Azure CLI: {e}")
        print("üí° Assurez-vous d'√™tre connect√© avec: az login")
        return
    
    # R√©cup√©ration des informations du site
    print("\n2. R√©cup√©ration des informations du site...")
    try:
        headers = {
            'Authorization': f'Bearer {token.token}',
            'Content-Type': 'application/json'
        }
        
        # Extraction des informations du site depuis l'URL
        site_parts = site_url.split('/')
        if len(site_parts) >= 5:
            tenant = site_parts[2]  # tenant.sharepoint.com
            site_name = site_parts[4]  # sites/site-name
        else:
            print("‚ùå Format d'URL SharePoint invalide")
            return
        
        # R√©cup√©ration des informations du site
        graph_url = f"https://graph.microsoft.com/v1.0/sites/{tenant}:/sites/{site_name}"
        response = requests.get(graph_url, headers=headers)
        
        if response.status_code == 200:
            site_info = response.json()
            site_id = site_info.get('id')
            print(f"‚úÖ Site trouv√©: {site_info.get('displayName')}")
            print(f"üìç Site ID: {site_id}")
        else:
            print(f"‚ùå Erreur d'acc√®s au site: {response.status_code}")
            return
    
    except Exception as e:
        print(f"‚ùå Erreur lors de l'acc√®s au site: {e}")
        return
    
    # Test d'√©criture avec l'API lists
    print("\n3. Test d'√©criture avec l'API lists...")
    try:
        # R√©cup√©ration des lists du site
        lists_url = f"{graph_url}/lists"
        lists_response = requests.get(lists_url, headers=headers)
        
        if lists_response.status_code == 200:
            lists_data = lists_response.json()
            lists = lists_data.get('value', [])
            print(f"‚úÖ {len(lists)} listes trouv√©es")
            
            # Recherche de la liste "Documents" ou "Documents Shared"
            documents_list = None
            for lst in lists:
                list_name = lst.get('displayName', '').lower()
                if 'document' in list_name or 'shared' in list_name:
                    documents_list = lst
                    print(f"üìã Liste trouv√©e: {lst.get('displayName')}")
                    break
            
            if documents_list:
                # Test d'upload via l'API drive de la liste
                list_id = documents_list.get('id')
                drive_url = f"{graph_url}/lists/{list_id}/drive"
                drive_response = requests.get(drive_url, headers=headers)
                
                if drive_response.status_code == 200:
                    drive_info = drive_response.json()
                    drive_id = drive_info.get('id')
                    print(f"‚úÖ Drive de la liste trouv√©: {drive_info.get('name')}")
                    
                    # Cr√©ation du contenu du fichier
                    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    text_content = f"""Test d'√©criture SharePoint DDASYS - Identit√© Personnelle
=======================================================

Fichier cr√©√© le: {timestamp}
Utilisateur: Identit√© personnelle (Azure CLI)
Site SharePoint: {site_url}
Dossier: {folder_path}

Ce fichier a √©t√© cr√©√© pour tester l'acc√®s en √©criture √† SharePoint
avec l'identit√© personnelle avant de tester avec User Assigned Identity.

M√©thode: API Microsoft Graph - Drive de liste
Site ID: {site_id}
Drive ID: {drive_id}

Test r√©ussi ! üéâ
"""
                    
                    filename = f"test-final-{datetime.now().strftime('%Y%m%d-%H%M%S')}.txt"
                    
                    # Upload du fichier dans le drive de la liste
                    upload_url = f"https://graph.microsoft.com/v1.0/drives/{drive_id}/root:/{filename}:/content"
                    
                    upload_headers = {
                        'Authorization': f'Bearer {token.token}',
                        'Content-Type': 'text/plain'
                    }
                    
                    upload_response = requests.put(
                        upload_url, 
                        data=text_content.encode('utf-8'),
                        headers=upload_headers
                    )
                    
                    if upload_response.status_code in [200, 201]:
                        file_info = upload_response.json()
                        print("üéâ ‚úÖ SUCC√àS ! Fichier cr√©√© avec succ√®s !")
                        print(f"   üìÑ Nom: {file_info.get('name')}")
                        print(f"   üìè Taille: {file_info.get('size')} bytes")
                        print(f"   üîó URL: {file_info.get('webUrl')}")
                        
                        # Test d'√©criture d'un fichier Excel aussi
                        print("\n4. Test d'√©criture fichier Excel...")
                        try:
                            # Cr√©ation d'un DataFrame de test
                            test_data = pd.DataFrame({
                                'nom': ['Alice', 'Bob', 'Charlie', 'Diana'],
                                'age': [25, 30, 35, 28],
                                'score': [85.5, 92.0, 78.5, 88.2],
                                'date_test': datetime.now(),
                                'site': site_url,
                                'dossier': folder_path
                            })
                            
                            # Cr√©ation d'un fichier Excel temporaire
                            with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as temp_file:
                                temp_file_path = temp_file.name
                            
                            # Export du DataFrame vers Excel
                            with pd.ExcelWriter(temp_file_path, engine='openpyxl') as writer:
                                test_data.to_excel(writer, sheet_name="TestData", index=False)
                            
                            # Lecture du contenu du fichier
                            with open(temp_file_path, 'rb') as file:
                                file_content = file.read()
                            
                            excel_filename = f"test-excel-{datetime.now().strftime('%Y%m%d-%H%M%S')}.xlsx"
                            excel_upload_url = f"https://graph.microsoft.com/v1.0/drives/{drive_id}/root:/{excel_filename}:/content"
                            
                            excel_headers = {
                                'Authorization': f'Bearer {token.token}',
                                'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                            }
                            
                            excel_response = requests.put(
                                excel_upload_url,
                                data=file_content,
                                headers=excel_headers
                            )
                            
                            if excel_response.status_code in [200, 201]:
                                excel_info = excel_response.json()
                                print("üéâ ‚úÖ Fichier Excel cr√©√© avec succ√®s !")
                                print(f"   üìä Nom: {excel_info.get('name')}")
                                print(f"   üìè Taille: {excel_info.get('size')} bytes")
                                print(f"   üîó URL: {excel_info.get('webUrl')}")
                            else:
                                print(f"‚ö†Ô∏è  √âchec upload Excel: {excel_response.status_code}")
                            
                            # Nettoyage du fichier temporaire
                            Path(temp_file_path).unlink(missing_ok=True)
                            
                        except Exception as e:
                            print(f"‚ö†Ô∏è  Erreur Excel: {e}")
                        
                        return True
                    else:
                        print(f"‚ùå Erreur upload: {upload_response.status_code}")
                        print(f"   R√©ponse: {upload_response.text}")
                else:
                    print(f"‚ùå Erreur acc√®s drive de liste: {drive_response.status_code}")
            else:
                print("‚ùå Aucune liste de documents trouv√©e")
        else:
            print(f"‚ùå Erreur acc√®s aux listes: {lists_response.status_code}")
    
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'√©criture: {e}")
    
    print("\n" + "=" * 55)
    print("Test termin√©")


if __name__ == "__main__":
    main() 