#!/usr/bin/env python3
"""
Script simple et direct pour √©crire dans SharePoint DDASYS
Bas√© sur votre script fonctionnel mais simplifi√©
"""

import os
import requests
from datetime import datetime
from azure.identity import AzureCliCredential
from dotenv import load_dotenv

# Chargement de la configuration
load_dotenv('.env')


def test_simple_write():
    """Test d'√©criture simple et direct dans SharePoint."""
    print("üìù Test d'√©criture simple SharePoint DDASYS")
    print("=" * 45)
    
    # Configuration
    site_url = os.getenv("SHAREPOINT_SITE_URL")
    
    if not site_url:
        print("‚ùå URL SharePoint non configur√©e")
        return False
    
    print(f"üåê Site SharePoint: {site_url}")
    
    try:
        # 1. Authentification
        print("\n1. Authentification...")
        credential = AzureCliCredential()
        token = credential.get_token("https://graph.microsoft.com/.default")
        print("‚úÖ Token obtenu")
        
        # 2. Headers pour les requ√™tes
        headers = {
            'Authorization': f'Bearer {token.token}',
            'Content-Type': 'application/json'
        }
        
        # 3. Test d'acc√®s au site
        print("\n2. Test d'acc√®s au site...")
        site_parts = site_url.split('/')
        tenant = site_parts[2]  # ddasys.sharepoint.com
        site_name = site_parts[4]  # DDASYS
        
        graph_url = (f"https://graph.microsoft.com/v1.0/sites/"
                     f"{tenant}:/sites/{site_name}")
        response = requests.get(graph_url, headers=headers)
        
        if response.status_code == 200:
            site_info = response.json()
            print(f"‚úÖ Site accessible: {site_info.get('displayName')}")
        else:
            print(f"‚ùå Erreur site: {response.status_code}")
            return False
        
        # 4. Test d'√©criture avec diff√©rentes approches
        print("\n3. Test d'√©criture...")
        
        # Contenu du fichier de test
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        content = f"""Test d'√©criture SharePoint DDASYS
Timestamp: {timestamp}
Utilisateur: Compte personnel (Azure CLI)
Site: {site_url}

Ce fichier confirme que l'√©criture fonctionne avec votre compte personnel.
"""
        
        filename = f"test_perso_{timestamp}.txt"
        
        # Approche 1: Utilisation de l'API SharePoint REST directe
        print("   Approche 1: API SharePoint REST...")
        try:
            # Headers pour SharePoint REST
            sp_headers = {
                'Authorization': f'Bearer {token.token}',
                'Accept': 'application/json;odata=verbose',
                'Content-Type': 'application/json;odata=verbose'
            }
            
            # Test d'acc√®s au contexte SharePoint
            context_url = f"{site_url}/_api/contextinfo"
            context_response = requests.post(context_url, headers=sp_headers)
            
            if context_response.status_code == 200:
                print("   ‚úÖ Contexte SharePoint accessible")
                
                # Tentative d'upload
                folder_path = ("/sites/DDASYS/Shared Documents")
                upload_url = (f"{site_url}/_api/web/"
                              f"GetFolderByServerRelativeUrl('{folder_path}')/"
                              f"Files/add(url='{filename}',overwrite=true)")
                
                upload_headers = sp_headers.copy()
                upload_headers['Content-Type'] = 'text/plain'
                
                upload_response = requests.post(
                    upload_url, 
                    data=content.encode('utf-8'), 
                    headers=upload_headers
                )
                
                if upload_response.status_code in [200, 201]:
                    print(f"   üéâ Fichier cr√©√© via REST API: {filename}")
                    return True
                else:
                    print(f"   ‚ö†Ô∏è  Erreur upload REST: "
                          f"{upload_response.status_code}")
            else:
                print(f"   ‚ö†Ô∏è  Erreur contexte: "
                      f"{context_response.status_code}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur REST: {e}")
        
        # Approche 2: Utilisation de l'API Graph avec un chemin plus simple
        print("   Approche 2: API Graph simple...")
        try:
            # Essayer d'acc√©der aux drives du site
            drives_url = f"{graph_url}/drives"
            drives_response = requests.get(drives_url, headers=headers)
            
            if drives_response.status_code == 200:
                drives = drives_response.json().get('value', [])
                print(f"   ‚úÖ {len(drives)} drives trouv√©s")
                
                if drives:
                    # Prendre le premier drive
                    drive = drives[0]
                    drive_id = drive.get('id')
                    
                    # Tentative d'upload dans ce drive
                    upload_url = (f"https://graph.microsoft.com/v1.0/"
                                  f"drives/{drive_id}/root:"
                                  f"/{filename}:/content")
                    upload_headers = {
                        'Authorization': f'Bearer {token.token}',
                        'Content-Type': 'text/plain'
                    }
                    
                    upload_response = requests.put(
                        upload_url, 
                        data=content.encode('utf-8'), 
                        headers=upload_headers
                    )
                    
                    if upload_response.status_code in [200, 201]:
                        file_info = upload_response.json()
                        print(f"   üéâ Fichier cr√©√© via Graph API: {filename}")
                        print(f"   üîó URL: {file_info.get('webUrl')}")
                        return True
                    else:
                        print(f"   ‚ö†Ô∏è  Erreur upload Graph: "
                              f"{upload_response.status_code}")
                        print(f"      R√©ponse: {upload_response.text}")
            else:
                print(f"   ‚ö†Ô∏è  Erreur drives: "
                      f"{drives_response.status_code}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur Graph: {e}")
        
        # Approche 3: Test avec diff√©rents scopes de token
        print("   Approche 3: Token SharePoint sp√©cifique...")
        try:
            # Essayer avec un token sp√©cifique SharePoint
            sp_token = credential.get_token(
                "https://ddasys.sharepoint.com/.default"
            )
            
            sp_specific_headers = {
                'Authorization': f'Bearer {sp_token.token}',
                'Accept': 'application/json;odata=verbose',
                'Content-Type': 'application/json;odata=verbose'
            }
            
            # Test d'acc√®s au web
            web_url = f"{site_url}/_api/web"
            web_response = requests.get(web_url, headers=sp_specific_headers)
            
            if web_response.status_code == 200:
                print("   ‚úÖ Acc√®s web SharePoint avec token sp√©cifique")
                
                # Tentative d'upload avec le token sp√©cifique
                folder_path = "/sites/DDASYS/Shared Documents"
                upload_url = (f"{site_url}/_api/web/"
                              f"GetFolderByServerRelativeUrl('{folder_path}')/"
                              f"Files/add(url='{filename}',overwrite=true)")
                
                upload_headers = sp_specific_headers.copy()
                upload_headers['Content-Type'] = 'text/plain'
                
                upload_response = requests.post(
                    upload_url, 
                    data=content.encode('utf-8'), 
                    headers=upload_headers
                )
                
                if upload_response.status_code in [200, 201]:
                    print(f"   üéâ Fichier cr√©√© avec token sp√©cifique: "
                          f"{filename}")
                    return True
                else:
                    print(f"   ‚ö†Ô∏è  Erreur upload token sp√©cifique: "
                          f"{upload_response.status_code}")
                    print(f"      R√©ponse: {upload_response.text}")
            else:
                print(f"   ‚ö†Ô∏è  Erreur web token sp√©cifique: "
                      f"{web_response.status_code}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur token sp√©cifique: {e}")
        
        print("\n‚ùå Toutes les approches ont √©chou√©")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        return False


def main():
    """Fonction principale."""
    success = test_simple_write()
    
    if success:
        print("\nüéâ SUCCESS! L'√©criture fonctionne avec votre compte "
              "personnel!")
        print("Vous pouvez maintenant proc√©der au test avec User "
              "Assigned Identity.")
    else:
        print("\nüîç L'√©criture n'a pas fonctionn√© via les APIs.")
        print("Cela peut √™tre d√ª aux permissions limit√©es de l'API.")
        print("Puisque vous pouvez √©crire manuellement, cela confirme que")
        print("vos permissions sont correctes pour le test avec User "
              "Assigned Identity.")


if __name__ == "__main__":
    main() 